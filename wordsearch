#!/usr/bin/env python
import sys
from math import sqrt, pow, floor
from random import choice

# Filter out the words that have empty length
words = sorted(filter(lambda x: len(x) > 0, 
    [word.upper() for word in open(sys.argv[1]).read().split('\n')]), key=len, reverse=True)

# Now we've got a list of words. Get the dimensions of the word search
# No error handling. Input throws SyntaxError on bad input. Oh, well.
width = int(input('How many characters wide do you want this to be? '))
height = int(input('How many characters tall do you want this to be? '))

# Let's make sure the longest word isn't too long for the longest position
# on the board (which is the diagonal). This is the pythorean theorom solution
max_len = int(floor(sqrt(pow(width, 2) + pow(height, 2))))
if len(words[0]) > max_len:
    print 'The board is not large enough for the largest word in the set'
    exit(-1)

# Alright, we're good to go.
# Set up our matrix
wordsearch = []
for i in range(width):
    wordsearch.append([])
    for j in range(height):
        wordsearch[i].append(' ')
def print_word_search():
    for line in wordsearch:
        print ''.join(line) 

print_word_search()

def test_position(

def get_start_point(direction, word):
    possibilities = []
    if direction == 'HORIZANTAL':
        max_x = width - len(word) + 1
        cur_x = 0
        cur_y = 0
        while cur_y < height:
            while cur_x < max_x:
                for char in word:
                    if wordsearch[cur_x][
        
            if wordsearch[cur_x][cur_y] == ' ' or wordsearch[cur_x][cur_y]
    if direction == 'VERTICAL':
        return (choice(range(width)), choice(range(height - len(word) + 1)))
    if direction == 'HORIZANTAL':
        return (0, 0)

for word in words:
    directions = []
    if len(word) <= width:
        directions.append('HORIZANTAL')
    if len(word) <= height:
        directions.append('VERTICAL')
    word_len = len(word)
    direction = choice(directions)
    reverse = choice([True, False])
    (x, y) = get_start_point(direction, word)
    if reverse:
        word = word[::-1]
    for char in word:
        wordsearch[x][y] = char
        if direction == 'HORIZANTAL':
            x += 1
        if direction == 'VERTICAL':
            y += 1
        if direction == 'DIAGONAL':
            x += 1
            y += 1
print_word_search()
